{"version":3,"sources":["img/section1.jpg","img/section2.jpg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","react_fullpage_default","scrollHorizontally","render","_ref","state","fullpageApi","Wrapper","className","style","backgroundImage","section1BG","backgroundRepeat","backgroundSize","color","backgroundColor","lineHeight","onClick","moveSectionDown","section2BG","padding","marginLeft","marginTop","marginRight","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sOC+DzBC,mLAvDX,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,oBAAoB,EACxBC,OAAQ,SAAAC,GAA4BA,EAAzBC,MAAyB,IAAlBC,EAAkBF,EAAlBE,YAChB,OACER,EAAAC,EAAAC,cAACC,EAAAF,EAAcQ,QAAf,KACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WAAWC,MAAO,CAC7BC,gBAAgB,OAAOC,IAAW,IAChCC,iBAAkB,YAClBC,eAAe,QACbC,MAAM,UACXC,gBAAgB,0BACfjB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,cACXV,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACO,WAAW,SACtBlB,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,qEAEFF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQQ,UAAW,YAAaS,QAAS,kBAAMX,EAAYY,oBAA3D,iBAIZpB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WAAWC,MAAO,CAC7BC,gBAAgB,OAAOS,IAAW,IAChCP,iBAAkB,YAClBC,eAAe,QACbC,MAAM,YAEVhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,cACXV,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACW,QAAQ,GAAGC,WAAW,MAAMC,UAAU,OAAOC,YAAY,MAAOR,gBAAgB,0BACzFjB,EAAAC,EAAAC,cAAA,+CAGAF,EAAAC,EAAAC,cAAA,qPArCJwB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS3B,OAAOL,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.146a68b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/section1.4d0c761f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/section2.ea2aec3d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactFullpage from '@fullpage/react-fullpage';\nimport section1BG from './img/section1.jpg'\nimport section2BG from './img/section2.jpg'\nclass App extends Component {\n  render() {\n    return (\n      <ReactFullpage\n        scrollHorizontally={true}\n    render={({ state, fullpageApi }) => {\n      return (\n        <ReactFullpage.Wrapper>\n          <div className=\"section \" style={{\n              backgroundImage:'url('+section1BG+')',\n                backgroundRepeat: \"no-repeat\",\n                backgroundSize:'cover',\n                  color:\"#ffffff\",\n             backgroundColor:'rgba(175,182,195,0.3)',}}>\n              <div className='App-header'>\n                  <div style={{lineHeight:'20px'}}>\n                    <h1>Hi,</h1>\n                    <h1>I'm Yujin Li,</h1>\n                    <h1>full stack developer</h1>\n                    <small> JavaScript | React | Bootstrap | HTML | CSS | ... </small>\n                  </div>\n                  <div>\n                      <button className={'learnMore'} onClick={() => fullpageApi.moveSectionDown()}>Learn More</button>\n                  </div>\n              </div>\n          </div>\n          <div className=\"section \" style={{\n              backgroundImage:'url('+section2BG+')',\n                backgroundRepeat: \"no-repeat\",\n                backgroundSize:'cover',\n                  color:\"#000000\",\n            }}>\n              <div className='App-header'>\n                  <div style={{padding:20,marginLeft:\"20%\",marginTop:\"-10%\",marginRight:'20%', backgroundColor:'rgba(175,182,195,0.5)'}}>\n                      <h3>\n                        Everything starts with curiosity.\n                      </h3>\n                      <div>\n                        i was born in China.\n                        when i was young,I always wanted to know how things work and how things are built.\n                        I am passionate about web technologies.\n                        I started learning JavaScript by myself when i was still in high school.\n\n\n                      </div>\n                    </div>\n\n            </div>\n          </div>\n        </ReactFullpage.Wrapper>\n      );\n    }}\n  />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}